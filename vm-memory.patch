diff -ruN vm-memory-0.16.2/src/mmap.rs vm-memory-0.16.2-patch/src/mmap.rs
--- vm-memory-0.16.2/src/mmap.rs	2025-05-30 23:12:40.000000000 +0700
+++ vm-memory-0.16.2-patch/src/mmap.rs	2025-07-06 13:30:51.640018153 +0700
@@ -14,8 +14,6 @@
 
 use std::borrow::Borrow;
 use std::io::{Read, Write};
-#[cfg(unix)]
-use std::io::{Seek, SeekFrom};
 use std::ops::Deref;
 use std::result;
 use std::sync::atomic::Ordering;
@@ -71,34 +69,6 @@
     UnsortedMemoryRegions,
 }
 
-// TODO: use this for Windows as well after we redefine the Error type there.
-#[cfg(unix)]
-/// Checks if a mapping of `size` bytes fits at the provided `file_offset`.
-///
-/// For a borrowed `FileOffset` and size, this function checks whether the mapping does not
-/// extend past EOF, and that adding the size to the file offset does not lead to overflow.
-pub fn check_file_offset(
-    file_offset: &FileOffset,
-    size: usize,
-) -> result::Result<(), MmapRegionError> {
-    let mut file = file_offset.file();
-    let start = file_offset.start();
-
-    if let Some(end) = start.checked_add(size as u64) {
-        let filesize = file
-            .seek(SeekFrom::End(0))
-            .map_err(MmapRegionError::SeekEnd)?;
-        file.rewind().map_err(MmapRegionError::SeekStart)?;
-        if filesize < end {
-            return Err(MmapRegionError::MappingPastEof);
-        }
-    } else {
-        return Err(MmapRegionError::InvalidOffsetLength);
-    }
-
-    Ok(())
-}
-
 /// [`GuestMemoryRegion`](trait.GuestMemoryRegion.html) implementation that mmaps the guest's
 /// memory region in the current process.
 ///
diff -ruN vm-memory-0.16.2/src/mmap_unix.rs vm-memory-0.16.2-patch/src/mmap_unix.rs
--- vm-memory-0.16.2/src/mmap_unix.rs	2025-05-30 23:12:40.000000000 +0700
+++ vm-memory-0.16.2-patch/src/mmap_unix.rs	2025-07-06 13:31:42.343351573 +0700
@@ -17,7 +17,7 @@
 
 use crate::bitmap::{Bitmap, BS};
 use crate::guest_memory::FileOffset;
-use crate::mmap::{check_file_offset, NewBitmap};
+use crate::mmap::NewBitmap;
 use crate::volatile_memory::{self, VolatileMemory, VolatileSlice};
 
 /// Error conditions that may arise when creating a new `MmapRegion` object.
@@ -41,12 +41,6 @@
     /// The `mmap` call returned an error.
     #[error("{0}")]
     Mmap(io::Error),
-    /// Seeking the end of the file returned an error.
-    #[error("Error seeking the end of the file: {0}")]
-    SeekEnd(io::Error),
-    /// Seeking the start of the file returned an error.
-    #[error("Error seeking the start of the file: {0}")]
-    SeekStart(io::Error),
 }
 
 pub type Result<T> = result::Result<T, Error>;
@@ -137,7 +131,6 @@
         }
 
         let (fd, offset) = if let Some(ref f_off) = self.file_offset {
-            check_file_offset(f_off, self.size)?;
             (f_off.file().as_raw_fd(), f_off.start())
         } else {
             (-1, 0)
@@ -558,16 +551,10 @@
             prot,
             flags,
         );
-        assert_eq!(format!("{:?}", r.unwrap_err()), "InvalidOffsetLength");
 
-        // Offset + size is greater than the size of the file (which is 0 at this point).
-        let r = MmapRegion::build(
-            Some(FileOffset::from_arc(a.clone(), offset)),
-            size,
-            prot,
-            flags,
+        assert!(
+            matches!(r.unwrap_err(), Error::Mmap(err) if err.raw_os_error() == Some(libc::EINVAL))
         );
-        assert_eq!(format!("{:?}", r.unwrap_err()), "MappingPastEof");
 
         // MAP_FIXED was specified among the flags.
         let r = MmapRegion::build(
diff -ruN vm-memory-0.16.2/src/mmap_xen.rs vm-memory-0.16.2-patch/src/mmap_xen.rs
--- vm-memory-0.16.2/src/mmap_xen.rs	2025-05-30 23:12:40.000000000 +0700
+++ vm-memory-0.16.2-patch/src/mmap_xen.rs	2025-07-06 13:32:26.340018312 +0700
@@ -26,7 +26,7 @@
 
 use crate::bitmap::{Bitmap, BS};
 use crate::guest_memory::{FileOffset, GuestAddress};
-use crate::mmap::{check_file_offset, NewBitmap};
+use crate::mmap::NewBitmap;
 use crate::volatile_memory::{self, VolatileMemory, VolatileSlice};
 
 /// Error conditions that may arise when creating a new `MmapRegion` object.
@@ -44,12 +44,6 @@
     /// The `mmap` call returned an error.
     #[error("{0}")]
     Mmap(io::Error),
-    /// Seeking the end of the file returned an error.
-    #[error("Error seeking the end of the file: {0}")]
-    SeekEnd(io::Error),
-    /// Seeking the start of the file returned an error.
-    #[error("Error seeking the start of the file: {0}")]
-    SeekStart(io::Error),
     /// Invalid file offset.
     #[error("Invalid file offset")]
     InvalidFileOffset,
@@ -524,7 +518,6 @@
 impl MmapXenUnix {
     fn new(range: &MmapRange) -> Result<Self> {
         let (fd, offset) = if let Some(ref f_off) = range.file_offset {
-            check_file_offset(f_off, range.size)?;
             (f_off.file().as_raw_fd(), f_off.start())
         } else {
             (-1, 0)
